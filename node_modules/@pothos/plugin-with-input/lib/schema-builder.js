"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _core = require("@pothos/core");
const rootBuilderProto = _core.RootFieldBuilder.prototype;
function capitalize(s) {
    return `${s.slice(0, 1).toUpperCase()}${s.slice(1)}`;
}
function defaultGetName({ parentTypeName , fieldName  }) {
    return `${parentTypeName}${capitalize(fieldName)}Input`;
}
rootBuilderProto.fieldWithInput = function fieldWithInput({ typeOptions: { name: typeName , ...typeOptions } = {} , argOptions: { name: argName = 'input' , ...argOptions } = {} , args , input , ...fieldOptions }) {
    var _this_builder_options_withInput, _this_builder_options_withInput1;
    const inputRef = this.builder.inputRef(typeName !== null && typeName !== void 0 ? typeName : `UnnamedWithInputOn${this.typename}`);
    var _this_builder_options_withInput_typeOptions;
    const { name: getTypeName = defaultGetName , ...defaultTypeOptions } = (_this_builder_options_withInput_typeOptions = (_this_builder_options_withInput = this.builder.options.withInput) === null || _this_builder_options_withInput === void 0 ? void 0 : _this_builder_options_withInput.typeOptions) !== null && _this_builder_options_withInput_typeOptions !== void 0 ? _this_builder_options_withInput_typeOptions : {};
    const fieldRef = this.field({
        args: {
            ...args,
            [argName]: this.arg({
                required: true,
                ...(_this_builder_options_withInput1 = this.builder.options.withInput) === null || _this_builder_options_withInput1 === void 0 ? void 0 : _this_builder_options_withInput1.argOptions,
                ...argOptions,
                type: inputRef
            })
        },
        ...fieldOptions
    });
    this.builder.configStore.onFieldUse(fieldRef, (config)=>{
        const name = typeName !== null && typeName !== void 0 ? typeName : getTypeName({
            parentTypeName: this.typename,
            fieldName: config.name
        });
        this.builder.inputType(name, {
            fields: ()=>input,
            ...defaultTypeOptions,
            ...typeOptions
        });
        this.builder.configStore.associateRefWithName(inputRef, name);
    });
    return fieldRef;
};
Object.defineProperty(rootBuilderProto, 'input', {
    get: function getInputBuilder() {
        return new _core.InputFieldBuilder(this.builder, 'InputObject', `UnnamedWithInputOn${this.typename}`);
    }
});

//# sourceMappingURL=schema-builder.js.map